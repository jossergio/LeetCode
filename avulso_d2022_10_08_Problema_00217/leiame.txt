Direto no LeetCode.

Fiz um modelinho baseado em um ordenamento prévio.

Após alguns errinhos, por falha de não perceber que uma função em C++ retornarva
unsigned, e por fazer uma contagem até o antepenúltimo achando que estava
contando até o penúltimo (isso teria passado de primeira, nem existindo o
primeiro erro), passou.

Ao analisar as postagens dos demais participantes, vi que poderia ter utilizado
mapas.

Então, fiz outros modelos e testes em outras linguagens.

Modelo 1 (C++): 249ms. Muito lento. Memória, bem razoável. Realizava a ordem
antes de fazar a busca.

Modelo 2 (C++): 223ms. Medianamente ruim. Memória, medianamente ruim. Utilizava
um mapa não ordenado para checar existência anterior.

Modelo 3 (GoLang): 164ms. Medianamente ruim. Memória, medianamente ruim.
Basicamente, é a tradução do modelo anterior, já que o mapa simples de GoLang
não é ordenado.

Modelo 4 (C++): 244ms. Muito lento. Memória, medianamente ruim. É o mesmo modelo
anterior, utilizando, somente, um mapa padrão C++ (ordenado).

Em C++, não houve abaixo de 54ms.

Em GoLang, não houve abaixo de 57ms.

Os modelos com mapas eram bem semelhantes aos melhores códigos. Não sei o porquẽ
da lentidão.

Ainda tentei fazer um modelo em Rust. Mas, eita linguagem chata do caramba.

====
Em 01/04/2025, fiz três modelos em Rust.

A ideia básica inicial era traduzir o último em C++.

Porém, resolvi adicionar estudos.

Modelo 5 (Rust): 3ms. Muito bom. Memória, ruim. Utilizava um mapa para armazenar
os já vistos.

Modelo 6 (Rust): 4ms. Medianamente bom. Memória, medianamente bom. No lugar de
mapa, utilizava um conjunto (set), pois só precisava saber se já havia sido
visto. O tempo ruim pode ter sido coisa da plataforma. Mas que a memória
melhorou, melhorou.

Modelo 7 (Rust): 1ms. Muito bom, quase excelente. Memória, quase excelente. No
lugar de uma estrutura auxiliar, ordenava o vetor e checava a condição na
sequência. Como desejei tornar o código mais Rust, acabava por testando o vetor
por inteiro, sem condição de parada antecipada quando a condição era satisfeita.
Mas ficou em três linhas, só porque havia uma condição de ordenar antes: tornar
mutável (coisa de Rust), ordenar e testar. Essa última ficou em uma linha única,
utilizando iterador.

Alguns em 0ms. A maior barra em 3ms. Mas houve ondulação até 12ms, última barra
em um gráfico que ía até 22ms.

Os códigos mostrados até 2ms utilizavam conjunto. O código em 4ms era bem
interessante, pois, apesar de utilizar conjunto, comparava tamanho com um
conjunto criado, tinha duas linhas mas poderia ficar em uma só, similar ao 5ms,
mas esse era meio "burrinho". O e 6ms fazia ordenação, mas era um pouco "burro",
também, na estrutura, apesar de conter um ponto de saída. E vamos parar por
aqui, nas análises.
