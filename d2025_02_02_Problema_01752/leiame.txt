Direto no LeetCode e pelo celular.

A plataforma me apresentava três soluções, que eu nem olhei.

Após um errinho, bobo, por não considerar a possibilidade de igualdade, que a
plataforma citava, inclusive, passou.

Considero a ideia geral minha similar à terceira da plataforma. Porém, também
considero minha ideia mais otimizada.

As duas primeiras ideias da plataforma eram bem lerdinhas. Uma delas eu tinha
pensado, mas, justamente, por conta dessa lerdeza, descartado.

Após postar, resolvi fazer um segundo modelo, com um pequeno ajuste no
primeiro.

Modelo 1 (Rust): 0ms. Melhor, impossível. Memória, horrível. Fazia uma
comparação entre o primeiro e o último item no vetor e buscava uma segunda
possibilidade de existência de inversão. Caso encontrasse uma segunda,
indiferentemente de ter sido na primeira, encerrava. Utilizava uma variável
booleana, como auxiliar.

Modelo 2 (Rust): 0ms. Melhor, impossível. Memória, medianamente boa. No lugar
da variável auxiliar booleana, jogava o primeiro valor no final e buscava, da
mesma forma, duas inversões.

Todo mundo em 0ms, com um código que poderia se comparar ao meu primeiro,
apesar de eu julgar não belo. O gráfico ía até 10ms.

Interessante é que o segundo modelo, que, no caso de Rust, para tornar um vetor
mutável, era produzido outro (clone), registrou menos uso de memória.
