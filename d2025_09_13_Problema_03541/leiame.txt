Direto no LeetCode e pelo tablet.

A plataforma me apresentava uma solução, que eu nem olhei.

Após postar, não há muito o que fazer de comparativo, pois o modelo da
plataforma, para Python 3, era por redução de linhas, e poderia ter ficado um
pouco menor, mas fazia duas passagens para contagem, de forma individual para
cada etapa.

A minha ideia era direta, com uma passada só.

Em Python, para aproveitar estruturas.

2ms. Medianamente bom.

Memória, posso dizer excelente.

No geral, todos utilizavam uma ideia parecida.

Meu código era o menor, em relação aos que vi dos demais participantes. Mas o da
plataforma era menor ainda.

Pensei em fazer um modelo em Rust, mas, fica para depois.

Tabém pensei em fazer outros modelos. Mas fica para outro momento.

=====
Em 14/09/2025, fiz modelos em Rust.

Era, mais, para exercitar, testar e brincar.

Como iria utilizar mapa, fiz o preparo por duas formas, para fazer testes. A
diferença entre elas fica como comentário na outra, pois, nos testes
preliminares, fiz com os dois.

Modelo 1 (Rust): 0ms. Melhor, impossível. Memória, mediana. Utilizava o método
entry e seus agregados para montar o mapa.

Modelo 2 (Rust): 0ms. Melhor, impossível. Memória, excelente. Utilizava o
método get e seus agregados, juntamente com o insert, para montar o mapa.

Apesar de o LeetCode não ser uma boa plataforma para testes de desempenho,
parece que utilizar o conjunto get e insert acaba sendo mais eficiente no uso da
memória.
